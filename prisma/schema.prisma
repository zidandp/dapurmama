// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @db.VarChar(255)
  description String   @db.Text
  price       Decimal  @db.Decimal(10, 2)
  imageUrl    String   @map("image_url") @db.VarChar(255)
  category    String   @db.VarChar(100)
  isAvailable Boolean  @default(true) @map("is_available")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations untuk fase selanjutnya
  poSessionProducts POSessionProduct[]
  orderItems        OrderItem[]

  @@map("products")
}

model User {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email     String   @unique @db.VarChar(255)
  password  String   @db.VarChar(255)
  name      String   @db.VarChar(255)
  role      UserRole @default(ADMIN)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  poSessions POSession[]

  @@map("users")
}

model POSession {
  id          String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String            @db.VarChar(255)
  description String?           @db.Text
  startDate   DateTime          @map("start_date") @db.Timestamptz(6)
  endDate     DateTime          @map("end_date") @db.Timestamptz(6)
  status      POSessionStatus   @default(DRAFT)
  createdById String            @map("created_by_id") @db.Uuid
  createdAt   DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime          @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  createdBy         User                @relation(fields: [createdById], references: [id])
  poSessionProducts POSessionProduct[]
  orders            Order[]

  @@map("po_sessions")
}

model POSessionProduct {
  id          String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  poSessionId String @map("po_session_id") @db.Uuid
  productId   String @map("product_id") @db.Uuid

  // Relations
  poSession POSession @relation(fields: [poSessionId], references: [id], onDelete: Cascade)
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([poSessionId, productId])
  @@map("po_session_products")
}

model Order {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderNumber   String      @unique @map("order_number") @db.VarChar(50)
  customerName  String      @map("customer_name") @db.VarChar(255)
  customerPhone String      @map("customer_phone") @db.VarChar(50)
  customerAddress String?   @map("customer_address") @db.Text
  notes         String?     @db.Text
  totalAmount   Decimal     @map("total_amount") @db.Decimal(10, 2)
  status        OrderStatus @default(PENDING)
  poSessionId   String?     @map("po_session_id") @db.Uuid
  createdAt     DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime    @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  poSession  POSession?  @relation(fields: [poSessionId], references: [id])
  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderId   String  @map("order_id") @db.Uuid
  productId String  @map("product_id") @db.Uuid
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  subtotal  Decimal @db.Decimal(10, 2)

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

enum UserRole {
  ADMIN
  SUPER_ADMIN
}

enum POSessionStatus {
  DRAFT
  ACTIVE
  CLOSED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  READY
  COMPLETED
  CANCELLED
}
